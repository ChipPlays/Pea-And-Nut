<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize variables
grav = 1;
hsp = 0;
vsp = 0;
jumpspeed = 11;
movespeed = .5;
max_hsp = 7;
normal_grav = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get the Player's Input
key_right = keyboard_check(vk_right);
key_left = -keyboard_check(vk_left);
key_jump = keyboard_check_pressed(vk_up);

//React to the player's inputs
move = key_left + key_right;
if (key_left = -1) previous_dir = -1;
if (key_right = 1) previous_dir = 1;

//Acceleration
if (hsp &lt; max_hsp) &amp;&amp; (hsp &gt; -max_hsp)
{
    hsp += move * movespeed;
}
else if (hsp = max_hsp)
{
    if (key_right)
    {
        hsp = max_hsp;
    }
    else
    {
        hsp -= 1
    }
}
else if (hsp = -max_hsp)
{
    if (key_left)
    {
        hsp = -max_hsp;
    }
    else
    {
        hsp += 1;
    }
}
if (hsp &gt; 0) &amp;&amp; (key_left = 0) &amp;&amp; (key_right = 0) &amp;&amp; (place_meeting(x,y+1,obj_wall)) {hsp -= .5}

if (hsp &lt; 0) &amp;&amp; (key_left = 0) &amp;&amp; (key_right = 0) &amp;&amp; (place_meeting(x,y+1,obj_wall)) {hsp += .5}

//Gravity
if (vsp &lt; 10) vsp += grav;

if (place_meeting(x,y+1,obj_wall))
{
    vsp = key_jump * -jumpspeed
}
//Wall Jumps
if (place_meeting(x+1,y,obj_wall)) &amp;&amp; (!place_meeting(x-1,y,obj_wall))
{
    if (key_jump) &amp;&amp; (!place_meeting(x,y+1,obj_wall))
    {
        vsp -= 15;
        hsp -= 5;
    }
}

if (place_meeting(x-1,y,obj_wall)) &amp;&amp; (!place_meeting(x+1,y,obj_wall))
{
    if (key_jump) &amp;&amp; (!place_meeting(x,y+1,obj_wall))
    {
        grav = normal_grav;;
        vsp -= 15;
        hsp += 5;
    }
}
//Wall Slides Left
    if (key_left = -1) &amp;&amp; (vsp &gt; 0) &amp;&amp; (place_meeting(x-1,y,obj_wall)) &amp;&amp; (!place_meeting(x,y+1,obj_wall))
    {
        if (vsp &lt;= 11) &amp;&amp; (vsp &gt; 1.5) vsp -= 1;
        if (vsp &lt;= 11)  &amp;&amp; (vsp &gt; 0) grav = .05;
  
    }
    if (key_left = -1 &amp;&amp; (place_meeting(x-1,y,obj_wall)) &amp;&amp; (!place_meeting(x,y+1,obj_wall)))
    {
        grav = normal_grav;
    }
    if (key_left = 0)
    {
        grav = normal_grav;
    }
//Wall Slides Right
    if (key_right = 1) &amp;&amp; (vsp &gt; 0) &amp;&amp; (place_meeting(x+1,y,obj_wall)) &amp;&amp; (!place_meeting(x,y+1,obj_wall))
    {
        if (vsp &lt;= 16) &amp;&amp; (vsp &gt; 1.5) vsp -= 1;
        if (vsp &lt; 10)  &amp;&amp; (vsp &gt; 0) grav = .05;
  
    }
    if (key_right = 1 &amp;&amp; (place_meeting(x+1,y,obj_wall)) &amp;&amp; (!place_meeting(x,y+1,obj_wall)))
    {
        grav = normal_grav;
    }
    if (key_right = 0)
    {
        grav = normal_grav;
    }
//Horizontal Collision
if (place_meeting(x+hsp,y,obj_wall))
{
while(!place_meeting(x+sign(hsp),y,obj_wall))
{
 x += sign(hsp);
}
hsp = 0;
}
x += hsp;

//Vertical Collision
if (place_meeting(x,y+vsp,obj_wall))
{
while(!place_meeting(x,y+sign(vsp),obj_wall))
{
 y += sign(vsp);
}
vsp = 0;
}

y += vsp;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="ded">
      <action>
        <libid>1</libid>
        <id>223</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_current_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="4" ename="object5">
      <action>
        <libid>1</libid>
        <id>223</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_current_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="4" ename="object0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var dist,dir,xdir,ydir;
dist=point_distance(x,y,xprevious,yprevious);
dir=degtorad(point_direction(xprevious,yprevious,x,y));
xdir=cos(dir);
ydir=-sin(dir);
x=xprevious;
y=yprevious;
repeat dist{
if place_meeting(x+xdir,y,other.object_index)
hspeed=0; else
x+=xdir;
if place_meeting(x,y+ydir,other.object_index)
vspeed=0; else
y+=ydir;
}

jump = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

if(facing == 1) image_xscale = 1;
else imagexscale = -1
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
